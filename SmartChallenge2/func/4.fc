{-

  TASK 4 - (De)Serialize to Cell
  Write the methods
    a) for serialization of tuple of arbitrary values of different types to Cell
    b) for deserialization of Cell created by method above to original tuple

  `serialize` method gets as input tuple with arbitrary number of elements from 0
  to 128 (both 0 and 128 elements are allowed) and outputs Cell. 
  Elements of the tuple may be `null`, `int`, `cell`, `slice`, `tuple` 
  (with the same limitations as original tuple). 
  It is guaranteed that the maximum nesting level of tuples is less than 4 and 
  total number of elements less than 1024.

  `deserialize` method gets a cell produced by `serialize` method and should
  return origin tuple.


  Note, for illustrative purposes`serialize_t3` and `deserialize_t3` functions
  which serialize and deserialize tuple with exactly 3 elements
  (only null, int, cell and slice are supportd) to/from a cell have been added.
  Participants are free to not use logic from there and come up with their own
  implementations.

  Tests will only check that test_tuple == deserialize(serialize(test_tuple)).
  Intermediate representation can be arbitrary.
-}

() recv_internal() {
}


builder serialize_element(builder b, var x) method_id
{
  if(is_null(x)) {
    b~store_uint(0,3);
  }
  if(is_int(x)) {
    int i_x = force_cast_to_int(x);
    b = b.store_uint(1,3).store_int(i_x, 257);
  }
  if(is_cell(x)) {
    cell c_x = force_cast_to_cell(x);
    b = b.store_uint(2,3).store_ref(c_x);
  }
  if(is_slice(x)) {
    slice s_x = force_cast_to_slice(x);
    b = b.store_uint(3,3).store_ref(begin_cell().store_slice(s_x).end_cell());
  }
  if(is_tuple(x)) {
    tuple t_x = force_cast_to_tuple(x);

    b = b.store_uint(4,3).store_uint(tuple_length(t_x), 8);
    while (tuple_length(t_x) > 0) {
      (t_x, var el) = ~tpop(t_x);
      b = serialize_element(b, el);
    }  
  }
  return b;
}

;; testable
(cell) serialize(tuple values) method_id
{
  int length = tuple_length(values);
  builder srl = begin_cell();
  
  ;;srl.store_uint(length, 8);
  ;;srl.store_int(first(values), 256);
  ;;srl.store_int(second(values), 256);

  srl.store_uint(2, 8);
  srl.store_int(3, 256);
  srl.store_int(4, 256);

  ;;while (tuple_length(values) > 0) {
  ;;  (values, var x) = ~tpop(values);
  ;;  srl = serialize_element(srl, x);
  ;;}

  return srl.end_cell();
}


(slice, tuple) deserialize_element_to_tuple(slice s, tuple t) 
{
  int element_type = s~load_uint(3);
  if(element_type == 0) { ;; type 0 - null
    t~tpush(null());
  }
  if(element_type == 1) { ;; type 1 - int
    t~tpush(s~load_int(257));
  }
  if(element_type == 2) { ;; type 2 - cell
    t~tpush(s~load_ref());
  }
  if(element_type == 3) { ;; type 3 - slice
    t~tpush(s~load_ref().begin_parse());
  }
  if(element_type == 4) { ;; type 4 - tuple

    int t_size = s~load_uint(8);
    repeat(t_size) {
      (t, var x) = ~tpop(t);
      (s, t) = deserialize_element_to_tuple(s, x);
    }  
  }
  return (s,t);
}

;; testable
(tuple) deserialize(cell sc) method_id
{
  slice s = sc.begin_parse();
  tuple t = empty_tuple();
  int t_size = s~load_uint(8);

  repeat (t_size) {
    (s,t) = deserialize_element_to_tuple(s,t~list_next());
  }
  return t;
}


(tuple) ser_deser(tuple t) method_id (3)
{
  ;;return t;
  return deserialize(serialize(t));
}


;; ==== Illustrative material ====
{-
builder serialize_element(builder b, var x) {
  if(is_null(x)) {
    b~store_uint(0,3);
  }
  if(is_int(x)) {
    ;; before this point compiler do not know true type of x
    ;; force it to be int
    int i_x = force_cast_to_int(x);
    b = b.store_uint(1,3).store_int(i_x, 257);
  }
  if(is_cell(x)) {
    ;; before this point compiler do not know true type of x
    ;; force it to be cell
    cell c_x = force_cast_to_cell(x);
    b = b.store_uint(2,3).store_ref(c_x);
  }
  if(is_slice(x)) {
    ;; before this point compiler do not know true type of x
    ;; force it to be slice
    slice s_x = force_cast_to_slice(x);
    b = b.store_uint(3,3).store_ref(begin_cell().store_slice(s_x).end_cell());
  }
  return b;
}
-}

{-
(slice, tuple) deserialize_element_to_tuple(slice s, tuple t) {
  int element_type = s~load_uint(3);
  if(element_type == 0) { ;; type 0 - null
    t~tpush(null());
  }
  if(element_type == 1) { ;; type 1 - int
    t~tpush(s~load_int(257));
  }
  if(element_type == 2) { ;; type 2 - cell
    t~tpush(s~load_ref());
  }
  if(element_type == 3) { ;; type 3 - slice
    t~tpush(s~load_ref().begin_parse());
  }
  return (s,t);
}
-}

{-
cell serialize_t3(tuple three_elements) method_id {
  throw_unless(777, three_elements.tuple_length() == 3);
  builder srl = begin_cell();
  srl = serialize_element(srl, three_elements.first());
  srl = serialize_element(srl, three_elements.second());
  srl = serialize_element(srl, three_elements.third());
  return srl.end_cell();
}
-}

{-
tuple deserialize_t3(cell sc) method_id {
  slice s = sc.begin_parse();
  tuple t = empty_tuple();
  repeat (3) {
    (s,t) = deserialize_element_to_tuple(s,t);
  }
  return t;
}
-}