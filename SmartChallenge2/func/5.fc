{-
  TASK 5 - Address encoder
  Write the method that for any valid MsgAddressInt with addr_std constructor
  without anycast
  (see https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L105)
  returns the slice that contain ASCII encoded base64url user-friendly bouncable
  address (without test-only flag), see https://ton.org/docs/#/howto/step-by-step?id=_1-smart-contract-addresses
-}

() recv_internal() {
}

int calc_crc16(slice s_data)
{
    int data = s_data~load_uint(34);
    int crc = 0xFFFF;
    int len = 34;
    while (len) {
        data = data + 1;
        crc ^= data << 8;

        int i = 0;
        repeat (8) {
	          crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
        }
        len = len - 1;
    }

    return crc;
}

;; testable
(slice) encode_address(slice Address) method_id {
    builder user_f = begin_cell();
    user_f.store_int(0x11, 8);
    user_f.store_int(0x00, 8);
    
    Address = preload_bits(Address, 32);
    slice addr = first_bits(Address, 256);

    slice data = slice_last(addr, 34);

    user_f.store_int(calc_crc16(data), 2);
    cell tmp_cell = user_f.end_cell();

    int slash = 0x2F; int stage = 0x5F;
    int plus = 0x2B; int minus = 0x2D;
    
    slice res = begin_parse(tmp_cell);
    builder b_res = begin_cell();
    while(slice_bits(res)) {
        int symb = res~load_int(4);
        if (symb == slash) { symb = stage; }
        if (symb == plus) { symb = minus; }

        b_res~store_int(symb, 4);
    }
    cell rc = b_res.end_cell();
    slice res1 = begin_parse(rc);
    return res1;
}